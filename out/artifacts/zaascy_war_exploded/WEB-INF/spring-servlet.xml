<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 用注解方式注入bean -->
    <context:annotation-config />

    <!-- 扫描包 -->
    <context:component-scan base-package="com.netcenter.zaascy.controller.*;com.netcenter.zaascy.dao.*;com.netcenter.zaascy.service.*;" />

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射,解决@ResponseBody乱码问题, 需要在annotation-driven之前,否则乱码问题同样无法解决 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 向 spring 容器中注册 DefaultAnnotationHandlerMapping。 向 spring 容器中注册 AnnotationMethodHandlerAdapter。
        配置一些 messageconverter。 解决了 @Controller 注解的使用前提配置，即 HandlerMapping 能够知道谁来处理请求。 -->
    <mvc:annotation-driven />
    <context:component-scan base-package="com.netcenter.*.controller" />

    <!--创建jdbc数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
    </bean>

    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:com/netcenter/zaascy/mapping/*.xml" />
        <!-- <property name="configLocation" value="WEB-INF/config/mybatis-configuration.xml" /> -->
    </bean>

    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.netcenter.*.dao" />
    </bean>

    <!-- 可通过注解控制事务 -->
    <tx:annotation-driven />

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/page/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 全局异常配置 start -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Exception">errors/500</prop>
                <prop key="java.lang.Throwable">login</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="errors/500">500</prop>
                <prop key="errors/404">400</prop>
                <prop key="errors/404">404</prop>
            </props>
        </property>
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
        <property name="warnLogCategory" value="WARN"/>
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
        <property name="defaultErrorView" value="/errors/500"/>
        <!-- 默认HTTP状态码 -->
        <property name="defaultStatusCode" value="500"/>
    </bean>
    <!-- 全局异常配置 end -->

    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->

        <!--
        <mvc:interceptor>
            <mvc:mapping path="/test/number.do"/>
            <bean class="com.host.app.web.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
         -->
        <mvc:interceptor>
            <!-- 需拦截的地址 -->
            <!-- 一级目录 -->
            <mvc:mapping path="/*.do" />


            <!-- 二级目录 -->
            <mvc:mapping path="/*/*.do" />

            <!-- 需排除拦截的地址 -->
            <mvc:exclude-mapping path="/user/goLogin.do"/>
            <mvc:exclude-mapping path="/user/login.do"/>
            <mvc:exclude-mapping path="/user/noPermission.do"/>
            <bean class="com.netcenter.zaascy.interceptor.BaseInterceptor" abstract="true"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <!-- 需拦截的地址 -->
            <!-- 一级目录 -->
            <mvc:mapping path="/trade.do" />
            <mvc:mapping path="/member.do" />
            <mvc:mapping path="/funds.do" />
            <mvc:mapping path="/workFlow.do" />
            <!-- 二级目录 -->
            <mvc:mapping path="/trade/*.do" />
            <mvc:mapping path="/member/*.do" />
            <mvc:mapping path="/funds/*.do" />
            <mvc:mapping path="/workFlow/*.do" />

            <bean class="com.netcenter.zaascy.interceptor.TradeInterceptor" abstract="true"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- spring thread pool executor -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 线程池维护线程的最少数量 -->
        <property name="corePoolSize" value="5" />
        <!-- 允许的空闲时间 -->
        <property name="keepAliveSeconds" value="200" />
        <!-- 线程池维护线程的最大数量 -->
        <property name="maxPoolSize" value="10" />
        <!-- 缓存队列 -->
        <property name="queueCapacity" value="20" />
        <!-- 对拒绝task的处理策略 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>
</beans>